class SAT

  attr_reader :variables, :classes
  
  def initialize(statement = 'u1 !u2, !u1 u2')    
    @variables = SAT.parse_variables(statement)
    @classes = SAT.parse_classes(statement)    
    #'u1 u2, u1 !u2, !u1' unsatifiable
  end

  #this code is bad. it works, but you should never do this.
  def is_sat? (classes = nil)
    class_set = classes || @classes    
    search_space = [true,false].repeated_permutation(@variables.length)    
    search_space.each do |attempt|      
      result = true
      class_set.each do |clause|
        passed = false
        clause.each do |word|
          passed = passed || attempt[@variables.index(word.last)] != word.first 
          break if passed
        end        
        result = result && passed
      end
      puts "#{variables.zip attempt}" if result
      return true if result
    end
    false
  end

  def self.parse_variables(test)
    test.gsub(/!|,/, '').split.uniq()
  end

  def self.parse_classes(text)
    raw_classes = text.split(',').map{|item| item.split()}
    raw_classes.map{|clause| clause.map{|word| [word.include?('!'), word.gsub('!', '') ] }}
  end

  def print_cnf_form(filename)
    File.open('translation.txt', 'w+') do |trans|
      File.open(filename, 'w+') do |file|
        trans.puts "matched translation file"
        trans.puts "#{@variables.size} #{@classes.size}"
        file.puts "c Autogenerated CNF"
        file.puts "p cnf #{@variables.size} #{@classes.size}"
        @classes.each do |cls|
          file.puts "#{cls.map{|var| (var.first ? -1 : 1) * (@variables.index(var.last) + 1 )}.join(' ')} 0"
          trans.puts "#{cls.map{|var| (var.first ? '!' : '') + var.last}.join(' ')}"
        end
      end
    end
  end

end